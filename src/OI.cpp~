// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/ArmDown.h"
#include "Commands/ArmSetpoint.h"
#include "Commands/ArmStickToggle.h"
#include "Commands/ArmStop.h"
#include "Commands/ArmUp.h"
#include "Commands/AutoArmSetpoint.h"
#include "Commands/AutoCArmDrive.h"
#include "Commands/AutoCDriveOnly.h"
#include "Commands/AutoDrive.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/IntakeForward.h"
#include "Commands/IntakeReverse.h"
#include "Commands/IntakeStop.h"
#include "Commands/PlaceHolder.h"
#include "Commands/Shift.h"
#include "Commands/ShootFast.h"
#include "Commands/ShootStop.h"
#include "Commands/ShootVariably.h"
#include "Commands/TankDrive.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    coDriver.reset(new Joystick(1));
    
    cRStick.reset(new JoystickButton(coDriver.get(), 10));
    cRStick->WhenPressed(new ArmSetpoint());
    cLStick.reset(new JoystickButton(coDriver.get(), 9));
    cLStick->WhenPressed(new ArmStickToggle());
    cRBumper.reset(new JoystickButton(coDriver.get(), 6));
    cRBumper->WhileHeld(new ShootFast());
    cLBumper.reset(new JoystickButton(coDriver.get(), 5));
    cLBumper->WhileHeld(new ShootVariably());
    cButtonY.reset(new JoystickButton(coDriver.get(), 4));
    cButtonY->WhileHeld(new ArmUp());
    cButtonX.reset(new JoystickButton(coDriver.get(), 3));
    cButtonX->WhileHeld(new IntakeForward());
    cButtonB.reset(new JoystickButton(coDriver.get(), 2));
    cButtonB->WhileHeld(new IntakeReverse());
    cButtonA.reset(new JoystickButton(coDriver.get(), 1));
    cButtonA->WhileHeld(new ArmDown());
    driver.reset(new Joystick(0));
    
    dRStick.reset(new JoystickButton(driver.get(), 10));
    dRStick->WhileHeld(new PlaceHolder());
    dLStick.reset(new JoystickButton(driver.get(), 9));
    dLStick->WhenPressed(new Shift());
    dRBumper.reset(new JoystickButton(driver.get(), 6));
    dRBumper->WhenPressed(new Shift());
    dLBumper.reset(new JoystickButton(driver.get(), 5));
    dLBumper->WhileHeld(new PlaceHolder());
    dButtonY.reset(new JoystickButton(driver.get(), 4));
    dButtonY->WhileHeld(new PlaceHolder());
    dButtonX.reset(new JoystickButton(driver.get(), 3));
    dButtonX->WhileHeld(new PlaceHolder());
    dButtonB.reset(new JoystickButton(driver.get(), 2));
    dButtonB->WhileHeld(new PlaceHolder());
    dButtonA.reset(new JoystickButton(driver.get(), 1));
    dButtonA->WhileHeld(new PlaceHolder());

    // SmartDashboard Buttons
    SmartDashboard::PutData("ArmStickToggle", new ArmStickToggle());
    SmartDashboard::PutData("ArmDown", new ArmDown());
    SmartDashboard::PutData("ArmUp", new ArmUp());
    SmartDashboard::PutData("ArmSetpoint", new ArmSetpoint());
    SmartDashboard::PutData("ArmStop", new ArmStop());
    SmartDashboard::PutData("IntakeReverse", new IntakeReverse());
    SmartDashboard::PutData("IntakeForward", new IntakeForward());
    SmartDashboard::PutData("IntakeStop", new IntakeStop());
    SmartDashboard::PutData("ShootStop", new ShootStop());
    SmartDashboard::PutData("ShootVariably", new ShootVariably());
    SmartDashboard::PutData("ShootFast", new ShootFast());
    SmartDashboard::PutData("Shift", new Shift());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getdriver() {
   return driver;
}

std::shared_ptr<Joystick> OI::getcoDriver() {
   return coDriver;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
