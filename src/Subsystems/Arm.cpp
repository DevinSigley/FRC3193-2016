// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Arm.h"
#include "../RobotMap.h"
#include "../Commands/ArmStop.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Arm::Arm() : Subsystem("Arm") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    armAngle = RobotMap::armArmAngle;
    armLeft = RobotMap::armArmLeft;
    armRight = RobotMap::armArmRight;
    armEncoder = RobotMap::armArmEncoder;
    armLimit = RobotMap::armArmLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Arm::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ArmStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

// Converts from effective rotations (overall arm rotation) to functional rotations (encoder reading) or vice versa
int Arm::ConvertRotations(int inputDeg, bool encoderToActual)
{
	// encoder reading to actual degree change of whole arm
	if (encoderToActual)
	{
		int outputDeg = inputDeg / 13.4;
		return outputDeg;
	}

	// actual degree change of whole arm to encoder reading
	else
	{
		int outputDeg = inputDeg * 13.4;
		return outputDeg;
	}
}

//Convert Arm Angle in Degrees
double Arm::CurrentArmAngle()
{
	double armAngleDeg = ( 180 * Robot::arm->armAngle->GetAverageVoltage() ) / 4 ;
	return armAngleDeg;
}
